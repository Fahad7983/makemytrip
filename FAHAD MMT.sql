create database Capstone_project;
select *from cleaned_makemytrip_data;

use Capstone_project;
show tables;
SELECT * FROM Users;

###all user information.
SELECT * FROM Users;

###hotel details where the rating is above 4.
SELECT * FROM Hotels WHERE Rating > 4;

###all flights with a price below 5000.
SELECT * FROM Flights WHERE Price < 5000;

###the number of users from each country.
SELECT Country, COUNT(*) AS UserCount FROM Users GROUP BY Country;

###all bookings made in 2024.
SELECT * FROM Bookings WHERE BookingDate LIKE '2024-%';

###Find the most expensive flight.
SELECT * FROM Flights ORDER BY Price DESC LIMIT 1;

###the average rating of hotels in Alaska.
SELECT AVG(Rating) AS AverageRating FROM Hotels WHERE State = 'Alaska';

###users who have not provided a phone number.
SELECT * FROM Users WHERE Phone IS NULL OR Phone = '';

###all reviews with a rating of 5.
SELECT * FROM Reviews WHERE Rating = 5;

###Retrieve bookings for a specific user
SELECT * FROM Bookings WHERE UserID = 275;

###the total number of flights available.
SELECT COUNT(*) AS TotalFlights FROM Flights;

###the total revenue generated from bookings.
SELECT SUM(TotalRevenue) AS TotalRevenue FROM Bookings;

###hotels with "WiFi" as an amenity.
SELECT * FROM Hotels WHERE Amenities LIKE '%WiFi%';

###bookings where the payment status is pending.
SELECT * FROM Bookings WHERE PaymentStatus = 'Pending';

###Get the earliest signup date among users.
SELECT MIN(SignupDate) AS EarliestSignup FROM Users;

###flights with less than 50 available seats.
SELECT * FROM Flights WHERE AvailableSeats < 50;

### COUNT the number of hotels in each state.
SELECT State, COUNT(*) AS HotelCount FROM Hotels GROUP BY State;

###details of canceled bookings.
SELECT * FROM Bookings WHERE BookingStatus = 'Canceled';

###the top 5 most expensive hotels.
SELECT * FROM Hotels ORDER BY PricePerNight DESC LIMIT 5;

###the average price of flights.
SELECT AVG(Price) AS AverageFlightPrice FROM Flights;

###List all users from India.
SELECT * FROM Users WHERE Country = 'India';

###reviews written in 2023.
SELECT * FROM Reviews WHERE ReviewDate LIKE '2023-%';

###all bookings for hotels in Alaska.
SELECT b.* FROM Bookings b 
JOIN Hotels h ON b.HotelID = h.HotelID 
WHERE h.State = 'Alaska';

###the number of bookings per booking type.
SELECT BookingType, COUNT(*) AS BookingCount FROM Bookings GROUP BY BookingType;

###Get the total revenue generated by flights.
SELECT SUM(Amount) AS FlightRevenue FROM Bookings WHERE BookingType = 'Flight';

###hotel details with at least 10 available rooms.
SELECT * FROM Hotels WHERE AvailableRooms >= 10;

###List the names of all airlines.
SELECT DISTINCT AirlineName FROM Flights;

###the longest travel duration.
SELECT MAX(TravelDuration) AS LongestDuration FROM Bookings;

###Retrieve flight bookings for a specific city (SourceCity = 'Howardhaven').
SELECT * FROM Bookings WHERE SourceCity = 'Howardhaven';

###Find hotels with a rating between 3 and 4.
SELECT * FROM Hotels WHERE Rating BETWEEN 3 AND 4;

####List all users aged 30 or above.
SELECT * FROM Users WHERE Age >= 30;

###Retrieve bookings sorted by travel date.
SELECT * FROM Bookings ORDER BY TravelDate;

###Find users who signed up in 2022.
SELECT * FROM Users WHERE SignupDate LIKE '2022-%';

###the number of reviews per user.
SELECT UserID, COUNT(*) AS ReviewCount FROM Reviews GROUP BY UserID;

###Get flight details with departure times after 6 PM.
SELECT * FROM Flights WHERE CAST(DepartureTime AS TIME) > '18:00:00';

###Calculate the total amount spent by a user (UserID = 948).
SELECT SUM(Amount) AS TotalSpent FROM Bookings WHERE UserID = 948;

####Find the average rating of all reviews.
SELECT AVG(Rating) AS AverageReviewRating FROM Reviews;

###bookings with a travel duration over 7 days.
SELECT * FROM Bookings WHERE TravelDuration > 168;

###hotels located in the same city as "Michelefurt".
SELECT * FROM Hotels WHERE City = 'Michelefurt';

###List users with more than 2 reviews.
SELECT u.* FROM Users u
JOIN (
  SELECT UserID, COUNT(*) AS ReviewCount FROM Reviews GROUP BY UserID HAVING COUNT(*) > 2
) r ON u.UserID = r.UserID;

###Total revenue for each city.
SELECT Sourcecity, SUM(Amount) AS Total_Revenue
FROM Bookings
GROUP BY sourcecity
ORDER BY TotalRevenue DESC;

####the number of bookings for each booking type.
SELECT BookingType, COUNT(*) AS Total_Bookings
FROM Bookings
GROUP BY BookingType;

###the average revenue per booking type.
SELECT BookingType, AVG(Amount) AS Average_Revenue
FROM Bookings
GROUP BY BookingType;

###Find bookings made in the last 30 days.
SELECT *
FROM Bookings
WHERE BookingDate >= CURRENT_DATE - INTERVAL 30 DAY;

###Top 5 users with the highest revenue contributions.
SELECT u.UserID,u.name, SUM(b.Amount) AS Total_Revenue
FROM Users u
INNER JOIN Bookings b ON u.UserID = b.UserID
GROUP BY u.UserID, u.name
ORDER BY Total_Revenue DESC
LIMIT 5;

###Users who booked a hotel with a 5-star rating.
SELECT DISTINCT u.UserID, u.Name
FROM Users u
INNER JOIN Bookings b ON u.UserID = b.UserID
INNER JOIN Hotels h ON b.HotelID = h.HotelID
WHERE h.Rating = 5;


###Calculate the running total of revenue over time.
SELECT BookingDate, 
       SUM(Amount) AS Daily_Revenue,
       SUM(SUM(Amount)) OVER (ORDER BY BookingDate) AS Running_Total
FROM Bookings
GROUP BY BookingDate;

###Hotels with revenue above the average hotel revenue.
SELECT HotelID,Bookingtype, SUM(Amount) AS Total_Revenue
FROM Bookings
WHERE BookingType = 'Hotel'
GROUP BY HotelID, Bookingtype
HAVING SUM(Amount) > (
    SELECT AVG(Total_Revenue) 
    FROM (
        SELECT SUM(Amount) AS Total_Revenue
        FROM Bookings
        WHERE BookingType = 'Hotel'
        GROUP BY HotelID
    ) SubQuery
);

###Users who made more bookings than the average number of bookings per user.
SELECT UserID, COUNT(*) AS Total_Bookings
FROM Bookings
GROUP BY UserID
HAVING COUNT(*) > (
    SELECT AVG(TotalBookings) 
    FROM (
        SELECT COUNT(*) AS TotalBookings
        FROM Bookings
        GROUP BY UserID
    ) SubQuery
);


###Monthly revenue trend.
SELECT DATE_FORMAT(BookingDate, '%Y-%m') AS Month, 
       SUM(Amount) AS Total_Revenue
FROM Bookings
GROUP BY DATE_FORMAT(BookingDate, '%Y-%m')
ORDER BY Month;

###Day of the week with the highest bookings.
SELECT DAYNAME(BookingDate) AS DayOfWeek, 
       COUNT(*) AS Total_Bookings
FROM Bookings
GROUP BY DAYNAME(BookingDate)
ORDER BY Total_Bookings DESC;

###List of users who have not made any bookings.
SELECT u.UserID, u.Name
FROM Users u
LEFT JOIN Bookings b ON u.UserID = b.UserID
WHERE b.BookingID IS NULL;

###Flights with the highest revenue contribution from repeat customers.
SELECT f.FlightID, f.AirlineName, SUM(b.Amount) AS Total_Revenue
FROM Flights f
INNER JOIN Bookings b ON f.FlightID = b.FlightID
INNER JOIN Users u ON b.UserID = u.UserID
WHERE u.name = 1
GROUP BY f.FlightID, f.AirlineName
ORDER BY Total_Revenue DESC;